#!/usr/bin/env bash

# Assumes you have three branches
#
#   4 FEATURE-behavior
#   |
#   3 FEATURE-migration
#   |
#   2 FEATURE-refactor
#   |
#   1 master
#
# If you add commits to 'behavior', all is well.
# But if you add commits to an earlier branch:
#
#   4 FEATURE-behavior
#   |
#   3 FEATURE-migration
#   |
#   | 5 FEATURE-refactor
#   |/
#   2
#   |
#   1 master
#
# Then you'd like those changes included in the later branches too.
# Run 'pump FEATURE', and later branches are rebased on top of older ones:
#
#   4 4' FEATURE-behavior
#   . |
#   3 3' FEATURE-migration
#   . |
#   . 5 FEATURE-refactor
#   ./
#   2
#   |
#   1 master
#
# Earlier versions of this script used merges instead of rebases.
# But this messes up in the event you do manually rebase anything.

set -e # exit on error
set -u # treat unset vars as an error

feature=${1-}
if [ -z "$feature" ]; then
    echo "Usage: pump FEATURENAME" >&2
    echo "Where you have git branches:" >&2
    echo "FEATURENAME-refactor" >&2
    echo "FEATURENAME-migration" >&2
    echo "FEATURENAME-behavior" >&2
    exit 1
fi

refactor="$feature-refactor"
migration="$feature-migration"
behavior="$feature-behavior"

git checkout "$migration"
git rebase "$refactor"

git checkout "$behavior"
git rebase "$migration"

