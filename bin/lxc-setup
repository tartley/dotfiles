#!/usr/bin/env bash

# See usage() below.

set -e # exit on error
set -u # treat unset vars as errors
# set -x # debugging output
set -o pipefail

function usage {
    echo "Copy a fixed set of $HOME dotfiles (eg. .bashrc), into the specified LXD containers."
    echo "The intent is to make the container ready for use as a development environment."
    echo "Usage: lxc-setup OPTIONS <container>..."
    echo "Where OPTIONS may include:"
    echo "    -a|--all      Act on all existing lxd containers."
    echo "                  No other container names must be specified."
    echo "    -h|--help     Show this help and exit."
}

function process_cmdline {
    all=false
    containers=()
    while [ $# -gt 0 ] ; do
        case "$1" in
            -h|--help) usage; exit;;
            -a|--all) all=true;;
            *) containers+=("$1");;
        esac
        shift
    done

    if [ ${#containers[@]} -ne 0 ] && "$all" ; then
        echo "lxc-setup: ERROR: Containers and '--all' are mutually exclusive." >&2
        usage >&2
        exit 1
    fi

    if $all ; then
        IFS=$'\n' containers=($(lxcls))
    else
        if [ "${#containers[@]}" -eq 0 ] ; then
            echo "lxc-setup: WARNING: No containers specified." >&2
            usage >&2
            exit 1
        fi
    fi
}

function validate_container {
    # Validate that the given container name is a real existing container
    local container="$1"
    if ! grep -q "^$container$" <<<"$(lxcls)" ; then
        echo "Not a valid container name" >&2
        return 1
    fi
}

function copy_dotfiles {
    local container="$1"
    echo -n "copying... "
    scp -qrp \
        ~/.bashrc* \
        ~/.bazaar/ \
        ~/.config/bat/config \
        ~/.dircolors \
        ~/.git-completion.bash \
        ~/.gitconfig \
        ~/.gitconfig.private \
        ~/.profile \
        ~/.ps1_vcs \
        ~/.pythonstartup.py \
        $container.lxd:~
}

function configure_container {
    local container="$1"
    copy_dotfiles "$container"
}

function is_running {
    local container="$1"
    if lxc info $container | grep -q 'Status: RUNNING' ; then
        echo true
    else
        echo false
    fi
}

function wait_for_container {
    # Wait for a (presumably new) container to start responding to ssh.
    # Without this, subsequent scp attempts would sometimes fail with 'lost connection'.
    # TODO: Add a timeout?
    local container="$1"
    while ! ssh -q -o ConnectTimeout=1 "$container.lxd" -- : ; do
        echo -n "." >&2
    done
}

function start_container {
    # Start a given existing container, and wait for it to start responding to ssh.
    local container="$1"
    echo -n "starting.." >&2
    lxc start "$container"
    wait_for_container "$container"
    echo -n " " >&2
}

function process_container {
    local container="$1"
    echo -n "$container: " >&2

    if ! validate_container "$container"; then
        return 1
    fi

    is_initially_running=$(is_running "$container")
    if [ "$is_initially_running" = false ] ; then
        start_container "$container"
    fi

    configure_container "$container"

    # If we started the container, now we stop it again,
    # to leave things how we found them.
    if [ "$is_initially_running" = false ] ; then
        echo -n "stopping... " >&2
        lxc stop "$container" &
    fi

    echo "ok" >&2
}

process_cmdline "$@"
exitval=0
for container in ${containers[@]}; do
    process_container "$container" || exitval=1
done
exit $exitval

