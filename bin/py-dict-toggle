#!/usr/bin/env python3
"""
Filter to toggle Python dictionaries between literal and dict() constructor format.

Reads and evaluates stdin, expecting to find a single Python dictionary. If the
dict is a literal, e.g. `{'a': 1}`, then it is converted to a constructor call,
eg `dict(a=1)`. Otherwise it is converted into a literal.

The input dict must be the only value present on stdin, barring an optional
trailing comma, which will be replicated on the output. If the input dict fits
on one line, then the output will be on one line too, otherwise output will
have one key-value pair per line.

eg: One line, with trailing comma: `{'a': 1},` -> `dict(a=1),`

eg: Multi-line, no trailing comma:

    {
        'a': 1,
    }

->

    dict(
        a=1,
    )

"""
import dataclasses
import sys

# parse input

def get_indentation(string):
    """Given a string, return the space chars that form its initial indent

    Raise if any tabs are spotted.
    """
    indentation = []
    for char in string:
        assert char != '\t'
        if char != ' ':
            break
        indentation += ' '
    return ''.join(indentation)

def is_oneple(value):
    """Is given value a tuple of one value?"""
    return isinstance(value, tuple) and len(value) == 1

def get_dict_value(value):
    dict_value = value[0] if is_oneple(value) else value
    if not isinstance(dict_value, dict):
        error(f'Error: Input is a {type(value).__name__}, should be a dict.')
    return dict_value

def is_oneline(string):
    nonempty_lines = [l for l in string.split('\n') if l.strip()]
    return len(nonempty_lines) <= 1

def parse_input(string):
    """Parse the given string using 'eval', looking for a single Python dictionary"""
    try:
        value = eval(string)
    except SyntaxError as exc:
        error(
            f'Error: {exc.msg}, line {exc.lineno}:\n'
            f'{exc.text}\n'
            f'{" " * (exc.offset - 1)}^'
        )
    return ParsedDict(
        indentation=get_indentation(string),
        dict_value=get_dict_value(value),
        is_literal=string.strip().startswith('{'),
        is_oneline=is_oneline(string),
        trailing_comma=is_oneple(value),
    )

# format output

@dataclasses.dataclass
class Parts:
    """Parts used to construct formatted output"""
    open_brace: str
    item_indent: str
    item: str
    item_sep: str
    close_brace: str

    @staticmethod
    def create(parsed):
        trailing_comma=',' if parsed.trailing_comma else ''
        return Parts(
            open_brace='{' if parsed.is_literal else 'dict(',
            item_indent='' if parsed.is_oneline else '    ',
            item='{key!r}: {value!r}' if parsed.is_literal else '{key}={value!r}',
            item_sep=', ' if parsed.is_oneline else ',',
            close_brace=f'}}{trailing_comma}' if parsed.is_literal else f'){trailing_comma}',
        )

def format_dict(parsed, parts):
    """Return list of str lines, containing the given dict as a literal"""
    results = [parts.open_brace]
    for index, (key, value) in enumerate(sorted(parsed.dict_value.items())):
        comma = parts.item_sep if not parsed.is_oneline or index < len(parsed.dict_value) - 1 else ''
        # First the f-string substitutes values for the single-braced {parts.item},
        # then the .format substitutes values for the other double-braced items.
        results.append(f'{{parts.item_indent}}{parts.item}{{comma}}'.format(**locals()))
    results.append(parts.close_brace)
    return [''.join(results)] if parsed.is_oneline else results

def indent(indentation, lines):
    """Use the given indentation prefix to indent the given lines"""
    return [f'{indentation}{line}' for line in lines]

def format_output(parsed):
    """Format the output"""
    sep = Parts.create(parsed)
    return indent(parsed.indentation, format_dict(parsed, sep))

# core

def error(message, exitval=1):
    print(message, file=sys.stderr)
    sys.exit(exitval)

@dataclasses.dataclass
class ParsedDict:
    indentation: str
    dict_value: dict
    is_literal: bool
    is_oneline: bool
    trailing_comma: bool

def transform(parsed):
    # Output is just like input, except for toggled use of dict literals
    return dataclasses.replace(parsed, is_literal=not parsed.is_literal)

def main():
    for line in format_output(transform(parse_input(sys.stdin.read()))):
        print(line)

if __name__ == '__main__':
    main()

