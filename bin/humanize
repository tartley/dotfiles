#!/usr/bin/env python3
"""
Command line filter, replacing strings in the stream:

* Integers and floats get thousand separators (commas, in English)
* "/home/MYUSER" gets replaced by "~"
* "$PWD" gets replaced by "."

eg.

    $ echo "1234" | humanize
    1,234

This is intended to make output easier to read. For example this abbreviates
the lengthy directory names in unittest output.
"""
import os
import re
import sys

def format_number(value: str):
    """If str value contains an int or float, format with commas.

    If it isn't a valid int or float, return the str unchanged.
    """
    try:
        return f'{int(value):,}'
    except ValueError:
        try:
            return f'{float(value):,}'
        except ValueError:
            return value

def process_number_matches(match):
    prefix, value, suffix = match.group(1, 2, 3)
    return prefix + format_number(value) + suffix

def insert_thousands_separators(line):
    return re.sub(r"(^| |=)([0-9.]+)($| )", process_number_matches, line)

def replace(line, pwd, pwd_real, home):
    line = insert_thousands_separators(line)
    replacements = [
        (pwd, "."),
        (pwd_real, "."),
        (home, "~"),
    ]
    # Sort to perform the longest replacements first
    replacements = sorted(replacements, key=lambda x: -len(x[0]))
    for value, char in replacements:
        line = line.replace(value, char)
    return line

def replace_all(lines, pwd, pwd_real, home):
    for line in lines:
        yield replace(line, pwd, pwd_real, home)

def main():
    pwd = os.getenv("PWD") # apparent name of pwd
    pwd_real = os.getcwd() # symlinks resolved, real name of pwd
    home = os.path.expanduser("~")
    for line in replace_all(sys.stdin, pwd, pwd_real, home):
        print(line, end="", flush=True)

if __name__ == "__main__":
    main()

