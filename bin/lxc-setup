#!/usr/bin/env bash

# Run with -h or see usage() below.

# TODO: Don't make changes without syncing with setup-devenv. See next item:
#
# TODO: Probably this should just call 'setup-devenv', maybe adding small
# extras like the chown on $HOME? Then I can run the same setup on the host or
# containers. First stumbling block: Will cloning dotfiles in the container
# (instead of copying selected files and mounting selected dirs) break things?
#
# TODO: See the apparently common advice to not use 'set -e' in nontrivial
# scripts. http://mywiki.wooledge.org/BashFAQ/105

set -e # exit on error
set -u # treat unset vars as errors
# set -x # debugging output
set -o pipefail

# To diagnose problems and silence default stdout, some logs are written to:
log="$HOME/.local/var/log/lxc-setup.log"

usage() {
    echo "Copy a fixed set of $HOME dotfiles (eg. .bashrc), into the given LXD container(s)."
    echo "The intent is to make the container ready for use as a development environment."
    echo "Usage: One of:"
    echo "    lxc-setup OPTIONS <container>..."
    echo "Where OPTIONS are:"
    echo "    -h|--help     Show this help and exit."
    echo "One or more space-separated containers may be specified."
}

process_cmdline() {
    containers=()
    while [ $# -gt 0 ] ; do
        case "$1" in
            -h|--help) usage; exit;;
            *) containers+=("$1");;
        esac
        shift
    done

    if [ "${#containers[@]}" -eq 0 ] ; then
        echo "lxc-setup: WARNING: No containers specified." >&2
        usage >&2
        exit 1
    fi
}

validate_container() {
    # Validate that the given container name is a real existing container
    local container="$1"
    if ! grep -q "^$container$" <<<"$(lxcls)" ; then
        echo "Not a valid container name" >&2
        return 1
    fi
}

copy_dotfiles() {
    local container="$1"

    echo -n "chown…  "
    lxc exec $container -- chown $USER:$USER /home/$USER

    echo -n "scp…  "
    scp -qrp \
        ~/.bashrc* \
        ~/.bazaar/ \
        ~/.config/bat/config \
        ~/.dircolors \
        ~/.git-completion.bash \
        ~/.gitconfig \
        ~/.gitconfig.private \
        ~/.profile \
        ~/.ps1_vcs \
        ~/.pythonstartup.py \
        $container.lxd:~
}

update_packages() {
    local container="$1"
    echo -n "update…  "
    lxc exec "$container" -- apt update --quiet &>>"$log"
    echo -n "upgrade…  "
    lxc exec "$container" -- apt upgrade -y --quiet &>>"$log"
    echo -n "autoremove…  "
    lxc exec "$container" -- apt autoremove -y --quiet &>>"$log"
}

install_packages() {
    # Install, as root, nice-to-have packages, including apt-caching on the container.
    local container="$1"
    echo -n "install…  "
    lxc exec --env DEBIAN_FRONTEND=noninteractive "$container" -- apt install -y --quiet \
        apt-cacher-ng \
        bat \
        colordiff \
        neovim \
        pipx \
        python3-venv \
        tree \
        -- &>>"$log"
}

install_python_packages() {
    # Install (as $USER) command-line tools which are Python packages.
    local container="$1"
    echo -n "pipx…  "
    ssh $container.lxd -- pipx install colout &>>"$log"
}

symlink_executables() {
    # Symlink executables onto the path
    local container="$1"
    echo -n "symlink…  "
    lxc exec $container -- ln -sf /usr/bin/batcat "$HOME/.local/bin/bat"
}

configure_container() {
    local container="$1"
    copy_dotfiles "$container"
    update_packages "$container"
    install_packages "$container"
    install_python_packages "$container"
    symlink_executables "$container"
}

is_running() {
    local container="$1"
    if lxc info $container | grep -q 'Status: RUNNING' ; then
        echo true
    else
        echo false
    fi
}

wait_for_container() {
    # Wait for a (presumably new) container to start responding to ssh.
    # Without this, subsequent scp attempts would sometimes fail with 'lost connection'.
    # TODO: Add a timeout?
    local container="$1"
    while ! ssh -q -o ConnectTimeout=1 "$container.lxd" -- : ; do
        echo -n "." >&2
    done
}

start_container() {
    # If the given container isn't already running, start it up
    local container="$1"
    was_initially_running=$(is_running "$container")
    if [ "$was_initially_running" = false ] ; then
        echo -n "start… " >&2
        lxc start "$container"
        wait_for_container "$container"
        echo -n " " >&2
    fi
    echo "$was_initially_running" # true or false
}

stop_container() {
    # If we started the container, now we stop it again,
    # to leave things how we found them.
    local container="$1"
    local was_initially_running="$2"
    if [ "$was_initially_running" = false ] ; then
        echo -n "stop…  " >&2
        lxc stop "$container" &
    fi
}

process_container() {
    local container="$1"
    echo -n "$container: " >&2
    if ! validate_container "$container"; then
        return 1
    fi
    was_initially_running=$(start_container "$container")
    configure_container "$container"
    stop_container "$container" "$was_initially_running"
    echo "ok" >&2
}

process_cmdline "$@"
exitval=0
for container in ${containers[@]}; do
    process_container "$container" || exitval=1
done
exit $exitval

